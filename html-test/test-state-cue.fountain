# Environment

[showid] "chocolate_cookie_show"

[include] ndn.js
[prefix] new Name("/ndn/edu/ucla/remap/losatlantis")
[face] new Face({host: "archive-dev.remap.ucla.edu"})
[include] ndn-init.js
[include] ndn-url-publisher-component.js

[defaultChatNickName] "The guide"
[chatJID] "admin.admin@archive-dev.remap.ucla.edu"
[chatPasswd] "admin@admin"

[defaultMucNickName] "The observatory" 
[defaultMucRoom] "observatory@conference.archive-dev.remap.ucla.edu"

[hostXMPP] "archive-dev.remap.ucla.edu" 
[hostXMPPHttpBind] "http://archive-dev.remap.ucla.edu:5280/http-bind"

[cueFolder] "../../cues/"

[include] jquery-2.1.4.min.js
[include] strophe.js
[include] strophe.muc.js
[connection] new Strophe.Connection(hostXMPPHttpBind);
[include] strophe-init.js

[include] script-control.js
[include] component-object.js
[include] ndn-publisher-component-object.js
[include] onload.js
[include] cue-object.js
[include] youtube-object.js
[include] db-object.js

# Body

/*
Debug: The state parameter is not ideal.
*/

.Dynamic cues

<<@sunset-installation-dynamic-cue
  (t      = "Sunset installation cue",
   cid    = -1,
   desc   = "Specifically made for sunset installation, include YT neighborhood query and such")>>

<<@sense-memories-dynamic-cue
  (t      = "Sense memories cue",
   cid    = -1,
   desc   = "Specifically made for agora 1, include supplied tag (when registration) query from our channel and such")>>

<<@agora-two-dynamic-cue
  (t      = "Agora two cue",
   cid    = -1,
   desc   = "Specifically made for agora 2, include supplied tag (runtime) query from our channel and such")>>

.Earlier samples

Test for cue state publishing

<<@cue-publisher-state
  (t       = "Series publishing cue", 
   cid     = -1, 
   desc    = "This is a cue which uses JS cue states; it triggers a random video play from a playlist every 10 seconds; replacing the events with load, wait_in, fade_in and run for actual cues.", 
   state   = {
	 'play1': {
	   time: 1000,
	   callback: function () {
	     createdElement.shadowRoot.querySelector('#state-play1').click();
	   }, 
	   state: 'playing1'
	 },
	 'play2': {
	   time: 10000,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-play2').click();
	   },
	   state: 'playing2'
	 },
	 'play3': {
	   time: 20000,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-play3').click();
	   }, 
	   state: 'playing3'
	 },
	 'play4': {
	   time: 30000,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-play4').click();
	   },
	   state: 'playing4'
	 },
	 'play5': {
	   time: 40000,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-play5').click();
	   }, 
	   state: 'playing5'
	 }
   })>>

<<@cue-publisher-state
  (t       = Manually triggered cue publisher load/go, 
   cid     = -1, 
   desc    = "This is a cue which uses JS cue states; it triggers a random video play from a playlist every 10 seconds; replacing the events with load, wait_in, fade_in and run for actual cues.", 
   state   = {
	 'load': {
	   time: -1,
	   callback: function () {
	     createdElement.shadowRoot.querySelector('#state-load').click();
	   }, 
	   state: 'loaded'
	 },
	 'go': {
	   time: -1,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-go').click();
	   },
	   state: 'going'
	 },
	 'unload': {
	   time: -1,
	   callback: function () {
		 createdElement.shadowRoot.querySelector('#state-unload').click();
	   }, 
	   state: 'unloaded'
	 }
   })>>


<<@cue-publisher-intercut-random
  (t       = "Random intercutting cue", 
   cid     = -1,
   desc    = "This is a cue which triggers random intercutting between 5-10 seconds.")>>

<<@door-publisher
  (t       = "Door publishing node A",
   node    = nodeA,
   desc    = "This push random video from our channel to 4 doors on a node every 2 ~ 4 seconds. Parameters are hardcoded into the JS component.")>>

<<@door-publisher
  (t       = "Door publishing node B",
   node    = nodeB,
   desc    = "This push random video from our channel to 4 doors on a node every 2 ~ 4 seconds. Parameters are hardcoded into the JS component.")>>

<<@door-publisher
  (t       = "Door publishing node C",
   node    = nodeC,
   desc    = "This push random video from our channel to 4 doors on a node every 2 ~ 4 seconds. Parameters are hardcoded into the JS component.")>>

<<@door-publisher
  (t       = "Door publishing node D",
   node    = nodeD,
   desc    = "This push random video from our channel to 4 doors on a node every 2 ~ 4 seconds. Parameters are hardcoded into the JS component.")>>

<<@random-video-publisher
  (t       = "random video publisher",
   containerId    = 1,
   nodeName       = node4,
   desc    = "Test for crash, publisheres to node4, container 1 onclick.")>>
